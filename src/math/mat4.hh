#pragma once

#include "data.hh"

#include <cstring>

namespace game {
inline void Transpose(const mat4* m, mat4* mt) {
  vec4 r0 = m->Row(0);
  vec4 r1 = m->Row(1);
  vec4 r2 = m->Row(2);
  vec4 r3 = m->Row(3);

  mt->SetCol(0, r0);
  mt->SetCol(1, r1);
  mt->SetCol(2, r2);
  mt->SetCol(3, r3);
}

inline void Mul(const mat4& a, const mat4& b, mat4* ab) {
  const float(*x)[4] = a.m_;
  const float(*y)[4] = b.m_;

  mat4 tmp;

  tmp.m_[0][0] = x[0][0] * y[0][0] + x[0][1] * y[1][0] + x[0][2] * y[2][0] + x[0][3] * y[3][0];
  tmp.m_[0][1] = x[0][0] * y[0][1] + x[0][1] * y[1][1] + x[0][2] * y[2][1] + x[0][3] * y[3][1];
  tmp.m_[0][2] = x[0][0] * y[0][2] + x[0][1] * y[1][2] + x[0][2] * y[2][2] + x[0][3] * y[3][2];
  tmp.m_[0][3] = x[0][0] * y[0][3] + x[0][1] * y[1][3] + x[0][2] * y[2][3] + x[0][3] * y[3][3];
  tmp.m_[1][0] = x[1][0] * y[0][0] + x[1][1] * y[1][0] + x[1][2] * y[2][0] + x[1][3] * y[3][0];
  tmp.m_[1][1] = x[1][0] * y[0][1] + x[1][1] * y[1][1] + x[1][2] * y[2][1] + x[1][3] * y[3][1];
  tmp.m_[1][2] = x[1][0] * y[0][2] + x[1][1] * y[1][2] + x[1][2] * y[2][2] + x[1][3] * y[3][2];
  tmp.m_[1][3] = x[1][0] * y[0][3] + x[1][1] * y[1][3] + x[1][2] * y[2][3] + x[1][3] * y[3][3];
  tmp.m_[2][0] = x[2][0] * y[0][0] + x[2][1] * y[1][0] + x[2][2] * y[2][0] + x[2][3] * y[3][0];
  tmp.m_[2][1] = x[2][0] * y[0][1] + x[2][1] * y[1][1] + x[2][2] * y[2][1] + x[2][3] * y[3][1];
  tmp.m_[2][2] = x[2][0] * y[0][2] + x[2][1] * y[1][2] + x[2][2] * y[2][2] + x[2][3] * y[3][2];
  tmp.m_[2][3] = x[2][0] * y[0][3] + x[2][1] * y[1][3] + x[2][2] * y[2][3] + x[2][3] * y[3][3];
  tmp.m_[3][0] = x[3][0] * y[0][0] + x[3][1] * y[1][0] + x[3][2] * y[2][0] + x[3][3] * y[3][0];
  tmp.m_[3][1] = x[3][0] * y[0][1] + x[3][1] * y[1][1] + x[3][2] * y[2][1] + x[3][3] * y[3][1];
  tmp.m_[3][2] = x[3][0] * y[0][2] + x[3][1] * y[1][2] + x[3][2] * y[2][2] + x[3][3] * y[3][2];
  tmp.m_[3][3] = x[3][0] * y[0][3] + x[3][1] * y[1][3] + x[3][2] * y[2][3] + x[3][3] * y[3][3];

  *ab = tmp;
};

// Copy 4-by-4 array into matrix
inline void mat4_copy(mat4* dst, const float (&m)[4][4]) {
  memcpy(dst, m, 64);
}
} // namespace game